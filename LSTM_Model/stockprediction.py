#streamlit run /Users/francescovacca/Desktop/LSTM_Model/stockprediction.py#Import the librariesimport pandas as pdfrom pandas_datareader import data as pdrimport yfinance as yfinimport matplotlib.pyplot as pltimport numpy as npfrom sklearn.preprocessing import MinMaxScalerfrom keras.models import Sequential, load_modelfrom keras.layers import Dense, Dropout, LSTMimport streamlit as stst.set_option('deprecation.showPyplotGlobalUse', False)#Define date rangestart = '2012-01-01'end = '2022-12-31'st.title('Stock Trend Prediction')user_input = st.text_input('Enter stock Ticket', 'AAPL')yfin.pdr_override()df = pdr.get_data_yahoo(user_input,start,end)#Describing Datast.subheader('Data from 2012 - 2023')st.write(df.describe())#Visualizationsst.subheader('Closing Price vs Time Chart')fig = plt.figure(figsize = (12,6))plt.plot(df.Close)st.pyplot()#Visualizations st.subheader('Closing Price vs Time Chart with 100MA')ma100 = df.Close.rolling(100).mean()fig = plt.figure(figsize = (12,6))plt.plot(ma100)plt.plot(df.Close)st.pyplot()st.subheader('Closing Price vs Time Chart with 100MA & 200MA')ma100 = df.Close.rolling(100).mean()ma200 = df.Close.rolling(200).mean()fig = plt.figure(figsize = (12,6))plt.plot(ma100, 'r')plt.plot(ma200,  'g')plt.plot(df.Close, 'b')st.pyplot()#Splitting Data into training and testing setdata_training = pd.DataFrame(df['Close'][0:int(len(df)*0.70)])data_testing = pd.DataFrame(df['Close'][int(len(df)*0.70):])#All the values are scaled in values between 0 and 1scaler = MinMaxScaler(feature_range=(0,1))data_training_array = scaler.fit_transform(data_training)#Splitting data into x_trainand y_trainx_train = np.array([data_training_array[i-100:i] for i in range(100,data_training_array.shape[0])])y_train = np.array([data_training_array[i,0] for i in range(100,data_training_array.shape[0])])#Load my modelmodel = load_model('/Users/francescovacca/Desktop/LSTM_Model/keras_model.h5')#Testing partpast_100_days = data_training.tail(100)final_df = past_100_days.append(data_testing, ignore_index = True)input_data = scaler.fit_transform(final_df) #data scaled in range(0,1)x_test = np.array([data_training_array[i-100:i] for i in range(100,input_data.shape[0])])y_test = np.array([data_training_array[i,0] for i in range(100,input_data.shape[0])])y_predicted = model.predict(x_test)scale_factor = 1/scaler.scale_[0] #scale factory_predicted *= scale_factory_test *= scale_factor#Plot final  graphst.subheader("Predictions vs Original")fig2 = plt.figure(figsize=(12,6))plt.figure(figsize=(12,6))plt.plot(y_test, 'b', label = 'Original Price')plt.plot(y_predicted, 'r', label = 'Predicted price')plt.xlabel('Time')plt.ylabel('Price')plt.legend()st.pyplot()